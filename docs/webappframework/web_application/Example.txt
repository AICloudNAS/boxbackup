TITLE Web application framework example

The test for the generic web application framework is test/webappframework, which implements a simple application which can be viewed in two languages. This document is a guided tour of the files involved in this example application.


SUBTITLE TestWebApp.cpp and TestWebApp.h

Each application has a class which implements global functionality. This class is included as a data member of the mini HTTP server generated by the framework, and assessible as mApplication in all generated functions.


SUBTITLE Templates/TestWebAppMain.en.html

This is the HTML template for the entire application. Notice the place markers for things such as title and page position, how some of the file is omitted, and the fragments for the TemplateContainer marked with HTML comments.


SUBTITLE TestWebApp.pl

This is the application setup file. It

* Sets the web application name, the daemon name, and the base URL for the web application

* Adds two languages, and sets the default to 'en' (English)

* Sets to global parameters, which are required for every single page. Note how the parameters are strongly typed with their C++ types.

* Defines some pages, and their paramters. This must be done in the global setup file, as linking to a page requires knowledge of it's paramters.

* Sets some defaults for the Units. This is used to avoid having to specify the template name for every single new() of a unit.

* Defines the setup_page() function, which returns a pre-initialised root Unit for every single page.

The setup_page function is called every time a page is to be generated. This example creates a root unit using PageTemplate. A menu object is inserted in the MENU marker position (at the moment, just a text string).

A status TableContainer is created, which displays several variables. One of the labels is linked to another page, taking paramters from the global paramters and a constant.


SUBTITLE Pages

This directory contains the page description scripts.


SUBTITLE Pages/Main.pl

Each of the page scripts adds the page title, using an add_text() call for the TITLE marker.

This adds a TableContainer in the main page marker, and text in various cells. Since this is all constant at compile time, you can see in the generated code that it is all output as one chunk of HTML, except for the one bit of dynamic HTML generated by the link in the bottom right cell.


SUBTITLE Languages

English is the default language for this application, and there is a translation into language 'CAPS', which is just English converted into upper case (a nice simple machine translation for the example.)

makeCAPStranslation.pl is a script which generates the translated files. Templates/TestWebAppMain.CAPS.html is a copy of Templates/TestWebAppMain.en.html with all the text changed to upper case. (NOTE: A clean rebuild of the system will be required to see the results properly after running this script.)

Languages/CAPS.txt is read in, and all translated text is converted into upper case. Note that the page names and the default language (lines starting with #) are not changed -- this would break the system.


SUBTITLE Makefile.extra

This Makefile fragment calls the main script to generate Makefile.webapp and the server class. 


SUBTITLE Makefile.webapp

This is automatically generated, and contains all the commands to generate the code for each page.


SUBTITLE autogen_webapp/TestWebAppServer.*

This implements the mini-HTTP server for the web application. Note the dispatch function in the .cpp file.


SUBTITLE autogen_webapp/*Page*.*

These C++ files implement the actual page HTML generation. There is one main file which contains all code common to all languages, and one .cpp file for each language. The language .cpp files contain a map of the Units used to generate the page -- which could be different for each language.



