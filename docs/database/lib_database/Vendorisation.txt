TITLE Database SQL Statement vendorisation

Each database server does some slightly non-standard things differently. In an attempt to allow a single SQL statement to work with multiple databases, even when using some of these "advanced" features, SQL statements are optionally "vendorised" before being passed to the database drivers.

This is a simple system of search and replace (with optional arguments) for strings within the statment, called generic representations. All strings begin with a ` character.

A generic respresentation is of the form

	`NAME

where NAME is a defined name composed of A-Z and _ only. It may optionally be given arguments, as

	`NAME(a,b,c)

where a, b, and c are arbitary strings which are used within the vendor specific representation of the generic representation.


Note that vendorisation is an optional step, for efficiency. Autogenerated queries detect whether it is necessary, but queries using DatabaseQueryGeneric must set a flag in the constructor if it's necessary.


SUBTITLE Supported generic representations

All database drivers support the following:

* AUTO_INCREMENT_INT

The column type for a column which is automatically generated by the database as an incrementing 4 byte integer -- useful for allocating objects to new IDs. See AutoIncrement.txt for more details of how to use this.

* LIMIT(offset,number)

Limit the number of results returned.

* CREATE_INDEX_CASE_INSENSTIVE(name, table, column)

Create an index of the column converted to lowercase, for use with CASE_INSENSITIVE_COLUMN(). Create a normal index if the database does not support this.

* CASE_INSENSITIVE_COLUMN(columnname)

For use with CREATE_INDEX_CASE_INSENSTIVE -- whenever you want to use the column, use this macro. And make sure the value you compare it to is all lower case.

* COLUMN_CASE_INSENSITIVE_ORDERING

When used in a type specifier for a column, mark the column as case insensitively ordered. Will be ignored if the database does not support it.



