*** file Makefile.extra

# AUTOGEN SEEDING
Makefile.webapp:	APP_LONG_NAME.pl
	perl ../../lib/webappframework/WebApplication.pl APP_LONG_NAME.pl make

# include-makefile: Makefile.webapp

*** if database
# AUTOGEN SEEDING
autogen_db/APP_LONG_NAME_schema.h:	APP_LONG_NAME.schema
	../../lib/database/makedbmake.pl .

# include-makefile: Makefile.db
*** endif

*** file APP_LONG_NAME.pl
use WebAppFramework::Unit::PageTemplate;
use WebAppFramework::Unit::TableContainer;
use WebAppFramework::Unit::Variable;
use WebAppFramework::Unit::Form;
*** if database
use WebAppFramework::Unit::Database::Table;
*** endif

$webapp->set_webapp_name('APP_LONG_NAME', 'APP_SHORT_NAME', 'APP_URL_BASE');

*** if database
# Add the database parameters to the config file
$webapp->add_extra_config_directive('string', 'DatabaseDriver');
$webapp->add_extra_config_directive('string', 'DatabaseConnection');

*** endif
# Add any more languages here
$webapp->add_language('en');
$webapp->set_default_langage('en');

# set up global parameters for all pages (example)
# $webapp->add_global_parameters('std::string Username');

# define each page, and the additional parameters it has
$webapp->add_page('Main', 'main');

# set defaults for Units
WebAppFramework::Unit::TableContainer->set_defaults('Template' => 'APP_LONG_NAMEMain');
WebAppFramework::Unit::PageTemplate->set_defaults('Template' => 'APP_LONG_NAMEMain');
WebAppFramework::Unit::Form->set_defaults('Template' => 'APP_LONG_NAMEMain', 'FragmentsName' => 'Form');
WebAppFramework::Unit::FormTableContainer->set_defaults('Template' => 'APP_LONG_NAMEMain', 'FragmentsName' => 'Form');
*** if database
WebAppFramework::Unit::Database::Table->set_defaults('Template' => 'APP_LONG_NAMEMain', 'FragmentsName' => 'DatabaseTable');
*** endif

# Subroutine to set up the basics of the page
sub setup_page
{
	my $page = WebAppFramework::Unit::PageTemplate->new();
	
	# Add other units to the page unit as required

	$page
}

1;

*** file APP_LONG_NAME.h
// --------------------------------------------------------------------------
//
// File
//		Name:    APP_LONG_NAME.h
//		Purpose: Web application object
//		Created: CREATE_DATE
//
// --------------------------------------------------------------------------

#ifndef APP_LONG_NAME__H
#define APP_LONG_NAME__H

#include "WebApplicationObject.h"
*** if database
#include "DatabaseConnection.h"
*** endif

// --------------------------------------------------------------------------
//
// Class
//		Name:    APP_LONG_NAME
//		Purpose: Web application
//		Created: CREATE_DATE
//
// --------------------------------------------------------------------------
class APP_LONG_NAME : public WebApplicationObject
{
public:
	APP_LONG_NAME();
	~APP_LONG_NAME();

*** if database
	void ChildStart(const Configuration &rConfiguration);
	void ChildFinish();

	DatabaseConnection &GetDatabaseConnection() {return mDatabase;}

private:
	DatabaseConnection mDatabase;
*** endif
};

#endif // APP_LONG_NAME__H

*** file APP_LONG_NAME.cpp
// --------------------------------------------------------------------------
//
// File
//		Name:    APP_LONG_NAME.cpp
//		Purpose: Web application
//		Created: CREATE_DATE
//
// --------------------------------------------------------------------------

#include "Box.h"

#include "APP_LONG_NAME.h"
*** if database
#include "Configuration.h"
*** endif

#include "MemLeakFindOn.h"


// --------------------------------------------------------------------------
//
// Function
//		Name:    APP_LONG_NAME::APP_LONG_NAME()
//		Purpose: Constructor
//		Created: CREATE_DATE
//
// --------------------------------------------------------------------------
APP_LONG_NAME::APP_LONG_NAME()
{
}


// --------------------------------------------------------------------------
//
// Function
//		Name:    APP_LONG_NAME::~APP_LONG_NAME()
//		Purpose: Desctructor
//		Created: CREATE_DATE
//
// --------------------------------------------------------------------------
APP_LONG_NAME::~APP_LONG_NAME()
{
}

*** if database

// --------------------------------------------------------------------------
//
// Function
//		Name:    APP_LONG_NAME::ChildStart(const Configuration &)
//		Purpose: Called when a child is started
//		Created: CREATE_DATE
//
// --------------------------------------------------------------------------
void APP_LONG_NAME::ChildStart(const Configuration &rConfiguration)
{
	mDatabase.Connect(rConfiguration.GetKeyValue("DatabaseDriver"),
		rConfiguration.GetKeyValue("DatabaseConnection"), 2000 /* timeout */);
}


// --------------------------------------------------------------------------
//
// Function
//		Name:    APP_LONG_NAME::ChildFinish()
//		Purpose: Called when the child process ends
//		Created: CREATE_DATE
//
// --------------------------------------------------------------------------
void APP_LONG_NAME::ChildFinish()
{
	mDatabase.Disconnect();
}

*** endif

*** if database
*** file APP_LONG_NAME.schema

# sample table -- delete and replace with the schema you're using
CREATE TABLE tItems (
	fID `AUTO_INCREMENT_INT,
	fString VARCHAR(64) NOT NULL
);

# sample data
INSERT INTO tItems(fString) VALUES('Ice cubes');
INSERT INTO tItems(fString) VALUES('Carrots');
INSERT INTO tItems(fString) VALUES('Bananas');

*** endif
*** file APP_SHORT_NAME.cpp
// --------------------------------------------------------------------------
//
// File
//		Name:    APP_SHORT_NAME.cpp
//		Purpose: Web application framework daemon starter
//		Created: 30/3/04
//
// --------------------------------------------------------------------------

#include "Box.h"

#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include "MainHelper.h"
#include "Configuration.h"
#include "autogen_webapp/APP_LONG_NAMEServer.h"
*** if database
#include "autogen_db/APP_LONG_NAME_schema.h"
#include "DatabaseConnection.h"
*** endif

#include "MemLeakFindOn.h"

int main(int argc, const char *argv[])
{
	MAINHELPER_START

*** if database
	// code to create and drop the database schema
	// use as
	//		APP_SHORT_NAME [create_db|drop_db] dbdriver_name connection_string
	if(argc == 4)
	{
		// Connect to database
		DatabaseConnection db;
		db.Connect(std::string(argv[2]), std::string(argv[3]), 2000);
		// Create or drop schema
		if(strcmp(argv[1], "create_db") == 0)
		{
			APP_LONG_NAME_Create(db);
			return 0;
		}
		else if(strcmp(argv[1], "drop_db") == 0)
		{
			APP_LONG_NAME_Drop(db);
			return 0;
		}
		else
		{
			::printf("Usage: APP_SHORT_NAME [create_db|drop_db] dbdriver_name connection_string\n");
			return 1;
		}
	}

*** endif
	// Start the web application
	APP_LONG_NAMEServer server;
	return server.Main(0, argc, argv);
	
	MAINHELPER_END
}

*** file APP_SHORT_NAME.conf

AddressPrefix = http://localhost:1080

*** if database
DatabaseDriver = sqlite
DatabaseConnection = APP_SHORT_NAME.sqlite

*** endif
Server
{
	PidFile = APP_SHORT_NAME.pid
	ListenAddresses = inet:localhost:1080
}

*** mkdir Pages
*** file Pages/Main.pl
*** if no_database

$page->add_text('TITLE','Main page');
$page->add_text('PAGE','Your content here');
*** endif
*** if database
use WebAppFramework::Unit::Database::Table;
use Database::Query;


$page->add_text('TITLE','Main page');

# example query from the test data in the .schema file
my $query = Database::Query->new(
		'Name' => 'ListRetrieve',
		'Statement' => 'SELECT fID,fString FROM tItems ORDER BY fString',
		'Results' => 'int32_t ID,std::string String'
	);
my $list = WebAppFramework::Unit::Database::Table->new(
		'Name' => 'entry',
		'Query' => $query
	);
$page->add_unit('PAGE', $list);

*** endif

1;

*** mkdir Languages
*** file Languages/default.txt
*** mkdir Templates
*** file Templates/APP_LONG_NAMEMain.en.html
<html>
<head>
<title>###TITLE### -- APP_LONG_NAME</title>
</head>
<body>
###PAGE###
<!--PageTemplate-Omit-Begin-->

<!--Menu-Begin-->
<table cellpadding=1 cellspacing=0 border=1>
<tr><td><b>MENU</b></td></tr>
<!--Menu/-->
<!--Menu-Item-->
<tr><td><a href="[URL]">[TEXT]</td></tr>
<!--Menu/-->
<!--Menu-ItemThisPage-->
<tr><td>[TEXT]</td></tr>
<!--Menu/-->
<!--Menu-End-->
</table>
<!--Menu/-->

<!--Table-Begin-->
<table cellpadding=1 cellspacing=2 border=1>
<!--Table/-->
<!--Table-RowBegin-->
<tr>
<!--Table/-->
<!--Table-CellBegin-->
<td valign=top>
<!--Table/-->
<!--Table-CellEnd-->
</td>
<!--Table/-->
<!--Table-RowEnd-->
</tr>
<!--Table/-->
<tr>
<!--Table-EmptyCell-->
<td>&nbsp;</td>
<!--Table/-->
</tr>
<!--Table-End-->
</table>
<!--Table/-->

<!--Form-ErrorStart-->
<font color=red>ERROR</font><br>
Please correct the highlighted fields in the form below.<p>
<!--Form/-->

<!--Form-ErrorListStart-->
<ul><li>
<!--Form/-->
<!--Form-ErrorListSeparate-->
<li>
<!--Form/-->
<!--Form-ErrorListEnd-->
</ul>
<!--Form/-->

<!--Form-Begin-->
<table cellpadding=1 cellspacing=2 border=0>
<!--Form/-->
<!--Form-RowBegin-->
<tr>
<!--Form/-->
<!--Form-CellBegin-Label-->
<td valign=top align=right>
<!--Form/-->
<!--Form-CellEnd-Label-->
</td>
<!--Form/-->
<!--Form-CellBegin-->
<td valign=top>
<!--Form/-->
<!--Form-ErrorMarker-->
<font color="red">**</font>
<!--Form/-->
<!--Form-InlineErrorStart-->
<br><small>
<!--Form/-->
Inline error message
<!--Form-InlineErrorEnd-->
</small>
<!--Form/-->
<!--Form-CellEnd-->
</td>
<!--Form/-->
<!--Form-RowEnd-->
</tr>
<!--Form/-->
<tr>
<!--Form-EmptyCell-->
<td>&nbsp;</td>
<!--Form/-->
</tr>
<!--Form-End-->
</table>
<!--Form/-->

*** if database
<!--DatabaseTable-Begin-->
<table cellpadding=1 cellspacing=2 border=1>
<!--DatabaseTable/-->
<!--DatabaseTable-RowBegin-->
<tr>
<!--DatabaseTable/-->
<!--DatabaseTable-HeadingCellBegin-->
<td valign=top bgcolor="#dddddd">
<!--DatabaseTable/-->
Heading
<!--DatabaseTable-HeadingCellEnd-->
</td>
<!--DatabaseTable/-->
<!--DatabaseTable-DataCellBegin-->
<td valign=top>
<!--DatabaseTable/-->
Data
<!--DatabaseTable-DataCellEnd-->
</td>
<!--DatabaseTable/-->
<!--DatabaseTable-RowEnd-->
</tr>
<!--DatabaseTable/-->
<!--DatabaseTable-End-->
</table>
<!--DatabaseTable/-->

*** endif
<!--PageTemplate-Omit-End-->
</body>
</html>
